// File: CPLD2.v
// Generated by MyHDL 0.8
// Date: Mon Jun 24 17:55:39 2013


`timescale 1ns/10ps

module CPLD2 (
    clk,
    rst,
    left_in,
    sel,
    sel_out,
    right_out,
    sel_decoded
);


input clk;
input rst;
input [4:0] left_in;
input [2:0] sel;
output [3:0] sel_out;
reg [3:0] sel_out;
output [4:0] right_out;
wire [4:0] right_out;
output [4:0] sel_decoded;
reg [4:0] sel_decoded;

reg [4:0] sel_decoded_before_fit;
reg [3:0] a_a;
reg [3:0] a_c;
reg [3:0] a_b;
reg [3:0] a_e;
reg [3:0] a_d;





always @(posedge clk, posedge rst) begin: CPLD2_A_SHIFTER
    if (rst == 1) begin
        a_a <= 0;
        a_c <= 0;
        a_b <= 0;
        a_e <= 0;
        a_d <= 0;
    end
    else begin
        a_a[4-1:1] <= a_a[3-1:0];
        a_a[0] <= left_in[0];
        a_b[4-1:1] <= a_b[3-1:0];
        a_b[0] <= left_in[1];
        a_c[4-1:1] <= a_c[3-1:0];
        a_c[0] <= left_in[2];
        a_d[4-1:1] <= a_d[3-1:0];
        a_d[0] <= left_in[3];
        a_e[4-1:1] <= a_e[3-1:0];
        a_e[0] <= left_in[4];
    end
end


always @(a_a, a_c, a_b, a_e, a_d, sel) begin: CPLD2_A_SELECTOR
    case (sel)
        'h0: begin
            sel_out = a_a;
        end
        'h1: begin
            sel_out = a_b;
        end
        'h2: begin
            sel_out = a_c;
        end
        'h3: begin
            sel_out = a_d;
        end
        'h4: begin
            sel_out = a_e;
        end
    endcase
end



assign right_out = {a_e[3], a_d[3], a_c[3], a_b[3], a_a[3]};

// if sel == 0:
//     o.next = intbv(1)
// elif sel == 1:
//     o.next = intbv(2)
// elif sel == 2:
//     o.next = intbv(4)
// elif sel == 3:
//     o.next = intbv(8)
// elif sel == 4:
//     o.next = intbv(16)
always @(sel) begin: CPLD2_DEC_DECODER
    sel_decoded_before_fit[0] = ((!sel[0]) && (!sel[1]) && (!sel[2]));
    sel_decoded_before_fit[1] = (sel[0] && (!sel[1]) && (!sel[2]));
    sel_decoded_before_fit[2] = ((!sel[0]) && sel[1] && (!sel[2]));
    sel_decoded_before_fit[3] = (sel[0] && sel[1] && (!sel[2]));
    sel_decoded_before_fit[4] = ((!sel[0]) && (!sel[1]) && sel[2]);
end


always @(sel_decoded_before_fit) begin: CPLD2_FITTOMATRIX
    sel_decoded[0] = (!sel_decoded_before_fit[0]);
    sel_decoded[1] = (!sel_decoded_before_fit[1]);
    sel_decoded[2] = (!sel_decoded_before_fit[2]);
    sel_decoded[3] = (!sel_decoded_before_fit[3]);
    sel_decoded[4] = (!sel_decoded_before_fit[4]);
end

endmodule
